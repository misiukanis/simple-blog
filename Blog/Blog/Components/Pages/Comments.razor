@page "/comments"
@using Blog.Domain.Enums
@using Blog.Helpers
@using Blog.Resources
@using Blog.HttpClients
@using Blog.Shared.Extensions
@using Microsoft.AspNetCore.Authorization
@using Blog.Shared;
@using Blog.Application.Queries.GetComments;
@using Blog.Application.DTOs;
@attribute [Authorize]
@inject IToastService ToastService
@inject BlogHttpClient BlogHttpClient
@inject NavigationManager NavigationManager


<PageTitle>Comments</PageTitle>


<table class="comments-table">
    <tr>
        <th>
            Author name
        </th>
        <th>
            Author email
        </th>
        <th>
            Content
        </th>
        <th>
            Status
        </th>
        <th>
            Creation date
        </th>
    </tr>

    @foreach (var comment in BlogComments)
    {
        <tr>
            <td>
                @comment.AuthorName
            </td>
            <td>
                @comment.AuthorEmail
            </td>
            <td>
                @comment.Content
            </td>
            <td>
                @{
                    if (comment.CommentStatus == CommentStatus.New)
                    {
                        <div class="comment-status-new">@(CommentStatusHelper.GetDescription(comment.CommentStatus))</div>
                        <div class="comment-status-option">
                            <a href="" @onclick="() => ChangeCommentStatus(comment, CommentStatus.Accepted)" @onclick:preventDefault>Accept</a>
                            <a href="" @onclick="() => ChangeCommentStatus(comment, CommentStatus.Rejected)" @onclick:preventDefault>Reject</a>
                        </div>
                    }
                    else if (comment.CommentStatus == CommentStatus.Accepted)
                    {
                        <div class="comment-status-accepted">@(CommentStatusHelper.GetDescription(comment.CommentStatus))</div>
                        <div class="comment-status-option">
                            <a href="" @onclick="() => ChangeCommentStatus(comment, CommentStatus.Rejected)" @onclick:preventDefault>Reject</a>
                        </div>
                    }
                    else if (comment.CommentStatus == CommentStatus.Rejected)
                    {
                        <div class="comment-status-rejected">@(CommentStatusHelper.GetDescription(comment.CommentStatus))</div>
                        <div class="comment-status-option">
                            <a href="" @onclick="() => ChangeCommentStatus(comment, CommentStatus.Accepted)" @onclick:preventDefault>Accept</a>
                        </div>
                    }
                }
            </td>
            <td>
                @comment.CreationDate.ToShortDateString()
            </td>
        </tr>
    }
</table>


@code {
    public List<CommentDTO> BlogComments = new List<CommentDTO>();

    protected override async Task OnInitializedAsync()
    {
        BlogComments = await BlogHttpClient.GetCommentsAsync();
    }

    private async Task ChangeCommentStatus(CommentDTO comment, CommentStatus newCommentStatus)
    {
        await BlogHttpClient.ChangeCommentStatusAsync(comment.CommentId, newCommentStatus);

        comment.CommentStatus = newCommentStatus;
        ToastService.ShowSuccess(Messages.CommentStatusChanged);
    }
}
