@using Blog.Models.Pagination
@using Blog.Models


<nav aria-label="Page navigation">
    <ul class="pagination justify-content-center">
        @foreach (var link in links)
        {
            <li @onclick="() => OnSelectedPage(link)" style="cursor: pointer;" class="page-item @(link.Enabled ? null : "disabled") @(link.Active ? "active" : null)">
                <span class="page-link" href="#">@link.Text</span>
            </li>
        }
    </ul>
</nav>


@code {
    [Parameter]
    public PaginationMetadata Metadata { get; set; }

    [Parameter]
    public int Spread { get; set; }

    [Parameter]
    public EventCallback<int> SelectedPage { get; set; }

    private List<PaginationLink> links;

    
    protected override void OnParametersSet()
    {
        CreatePaginationLinks();
    }

    private void CreatePaginationLinks()
    {
        links = new List<PaginationLink>();
        links.Add(new PaginationLink(Metadata.CurrentPage - 1, Metadata.HasPreviousPage, false, "Previous"));
        for (int i = 1; i <= Metadata.TotalPagesCount; i++)
        {
            if(i >= Metadata.CurrentPage - Spread && i <= Metadata.CurrentPage + Spread)
            {
                links.Add(new PaginationLink(i, true, Metadata.CurrentPage == i, i.ToString()));
            }
        }
        links.Add(new PaginationLink(Metadata.CurrentPage + 1, Metadata.HasNextPage, false, "Next"));
    }

    private async Task OnSelectedPage(PaginationLink link)
    {
        if (link.Page == Metadata.CurrentPage || !link.Enabled)
            return;

        Metadata.CurrentPage = link.Page;
        await SelectedPage.InvokeAsync(link.Page);
    }
}
