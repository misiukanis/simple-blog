@page "/"
@using Blog.Client.HttpClients
@using Blog.Shared.DTOs
@using Blog.Shared.Params
@using Resources
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject IToastService ToastService
@inject BlogHttpClient BlogHttpClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager


<PageTitle>Index</PageTitle>


@foreach (var post in BlogPosts)
{
    <article class="single-container">
        <h2 class="blog-subject">@post.Title</h2>
        <br />
        <p>@((MarkupString)post.Introduction)</p>
        <br />
        <div class="fleft grey">
            @post.CreationDate.ToShortDateString()
            &nbsp;&nbsp;
            (@post.CommentsCount comments)
        </div>
        <div class="fright">
        </div>
        <div class="more">
            <a href="/post/@post.PostId">Details</a>
        </div>
        <div class="hidden-links @(isUserAuthenticated ? "visible" : "hidden")">
            <a class="actionButton" href="/edit-post/@post.PostId">Edit</a>
            <a class="actionButton" href="" @onclick="() => DeletePost(post.PostId)">Delete</a>
        </div>
    </article>
    <br />
    <br />
}


@code {
    public List<PostDTO> BlogPosts = new List<PostDTO>();

    private bool isUserAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {        
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isUserAuthenticated = authState.User.Identity.IsAuthenticated;

        await GetPosts();
    }

    private async Task DeletePost(Guid postId)
    {
        await BlogHttpClient.DeletePostAsync(postId);
        ToastService.ShowSuccess(Messages.PostDeleted);

        await GetPosts();
    }

    private async Task GetPosts()
    {
        var pagingResponse = await BlogHttpClient.GetPaginatedPostsAsync(new PaginationParams { Page = 1, ItemsCountPerPage = 3 });
        BlogPosts = pagingResponse.Items;
    }
}